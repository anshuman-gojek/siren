// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProviderRepository is an autogenerated mock type for the ProviderRepository type
type ProviderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ProviderRepository) Create(_a0 *domain.Provider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Provider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *ProviderRepository) Delete(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filters
func (_m *ProviderRepository) Find(filters map[string]interface{}) ([]*domain.Provider, error) {
	ret := _m.Called(filters)

	var r0 []*domain.Provider
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*domain.Provider); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: _a0
func (_m *ProviderRepository) GetOne(_a0 uint) (*domain.Provider, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(uint) *domain.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *ProviderRepository) Update(_a0 *domain.Provider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Provider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
